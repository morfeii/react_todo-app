{"version":3,"sources":["components/NewTodo.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["NewTodo","state","title","handleChangeInput","value","target","setState","replace","handleSubmit","event","preventDefault","addNewTodo","props","id","uuidv4","completed","this","className","onSubmit","placeholder","onChange","React","Component","TodoItem","isEditing","editedTitle","todoTitle","handleDoubleClick","handleChangeEdit","onEditChange","handleEditSubmit","handleDoubleClickEditTitle","todoId","handleDeleteTodo","todoStatus","handleTodoStatus","liClassName","cx","editing","type","onBlur","checked","onDoubleClick","htmlFor","onClick","TodoList","todosList","length","map","key","TodosFilter","initialTodos","buttonSelected","handleButtonChange","handleDeleteAllCompleted","buttonClearStyles","disable","some","todo","footerStyle","hidden","filter","href","App","todos","handleAddNewTodo","prevState","handlecompletedAll","filterFunc","arr","every","mapFuncStatusTodo","arrFilter","mapFuncEditTitle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.645f26f6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class NewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleChangeInput = ({ target: { value } }) => {\n    this.setState({\n      title: value.replace(/^\\s/, ''),\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { addNewTodo } = this.props;\n    const { title } = this.state;\n\n    addNewTodo({\n      title,\n      id: uuidv4(),\n      completed: false,\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"new-todo\"\n            value={title}\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleChangeInput}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nexport class TodoItem extends React.Component {\n  state = {\n    isEditing: false,\n    editedTitle: this.props.todoTitle,\n  }\n\n  handleDoubleClick = () => {\n    this.setState({\n      isEditing: true,\n    });\n  }\n\n  handleChangeEdit = () => {\n    this.setState({\n      isEditing: false,\n    });\n  }\n\n  onEditChange = ({ target: { value } }) => {\n    this.setState({\n      editedTitle: value,\n    });\n  }\n\n  handleEditSubmit = () => {\n    const {\n      handleDoubleClickEditTitle,\n      todoId,\n      handleDeleteTodo,\n    } = this.props;\n    const { editedTitle } = this.state;\n\n    this.setState({\n      isEditing: false,\n    });\n\n    if (editedTitle !== '') {\n      handleDoubleClickEditTitle(editedTitle, todoId);\n    } else {\n      handleDeleteTodo(todoId);\n    }\n  }\n\n  render() {\n    const {\n      todoTitle,\n      todoStatus,\n      todoId,\n      handleTodoStatus,\n      handleDeleteTodo,\n    } = this.props;\n    const { editedTitle } = this.state;\n    const liClassName = cx({\n      editing: this.state.isEditing,\n      completed: todoStatus,\n    });\n\n    return (\n      <li className={liClassName}>\n        { !this.state.isEditing\n          ? (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todoId}\n                checked={todoStatus}\n                onChange={() => handleTodoStatus(todoId)}\n              />\n              <p\n                className=\"label\"\n                onDoubleClick={this.handleDoubleClick}\n                htmlFor={todoId}\n              >\n                {todoTitle}\n              </p>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => handleDeleteTodo(todoId)}\n              />\n            </div>\n          )\n          : (\n            <form\n              onSubmit={this.handleEditSubmit}\n            >\n              <input\n                type=\"text\"\n                className=\"edit\"\n                value={editedTitle}\n                onChange={this.onEditChange}\n                onBlur={this.handleChangeEdit}\n              />\n            </form>\n          )\n        }\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todoTitle: PropTypes.string.isRequired,\n  todoStatus: PropTypes.bool.isRequired,\n  todoId: PropTypes.string.isRequired,\n  handleTodoStatus: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n  handleDoubleClickEditTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todosList,\n  handleTodoStatus,\n  handleDeleteTodo,\n  handleDoubleClickEditTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todosList.length\n      ? todosList\n        .map(({ title, completed, id }) => (\n          <TodoItem\n            key={id}\n            todosList={todosList}\n            todoTitle={title}\n            todoStatus={completed}\n            todoId={id}\n            handleTodoStatus={handleTodoStatus}\n            handleDeleteTodo={handleDeleteTodo}\n            handleDoubleClickEditTitle={handleDoubleClickEditTitle}\n          />\n        ))\n      : null\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todosList: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  handleTodoStatus: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n  handleDoubleClickEditTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nexport const TodosFilter = ({\n  todosList,\n  initialTodos,\n  buttonSelected,\n  handleButtonChange,\n  handleDeleteAllCompleted,\n}) => {\n  const buttonClearStyles = cx('clear-completed', {\n    disable: !todosList.some(todo => todo.completed),\n  });\n  const footerStyle = cx('footer', {\n    hidden: !initialTodos.length,\n  });\n\n  return (\n    <footer className={footerStyle}>\n      <span className=\"todo-count\">\n        {initialTodos.length && initialTodos\n          .filter(todo => !todo.completed).length}\n        {' items left'}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/all\"\n            className={buttonSelected === 'all' ? 'selected' : ''}\n            onClick={() => handleButtonChange('all')}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            className={buttonSelected === 'active' ? 'selected' : ''}\n            onClick={() => handleButtonChange('active')}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            className={buttonSelected === 'completed' ? 'selected' : ''}\n            onClick={() => handleButtonChange('completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className={buttonClearStyles}\n        onClick={handleDeleteAllCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = {\n  handleButtonChange: PropTypes.func.isRequired,\n  initialTodos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosList: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  buttonSelected: PropTypes.string.isRequired,\n  handleDeleteAllCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { NewTodo } from './components/NewTodo';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    initialTodos: [],\n    buttonSelected: 'all',\n  }\n\n  handleAddNewTodo = (todo) => {\n    if (todo.title) {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, todo],\n        initialTodos: [...prevState.initialTodos, todo],\n      }));\n    }\n\n    this.handleButtonChange(this.state.buttonSelected);\n  };\n\n  handlecompletedAll = () => {\n    const filterFunc = arr => (\n      arr.map(todo => ({\n        ...todo,\n        completed: !arr.every(({ completed }) => completed),\n      }))\n    );\n\n    this.setState(prevState => ({\n      todos: filterFunc(prevState.todos),\n      initialTodos: filterFunc(prevState.initialTodos),\n    }));\n    this.handleButtonChange(this.state.buttonSelected);\n  };\n\n  handleTodoStatus = (todoId) => {\n    const mapFuncStatusTodo = todo => (\n      todo.id === todoId\n        ? {\n          ...todo, completed: !todo.completed,\n        }\n        : todo\n    );\n\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map(mapFuncStatusTodo),\n      initialTodos: prevState.initialTodos\n        .map(mapFuncStatusTodo),\n    }));\n  };\n\n  handleDeleteTodo = (todoId) => {\n    const arrFilter = todo => (\n      todo.id !== todoId\n    );\n\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .filter(arrFilter),\n      initialTodos: prevState.initialTodos\n        .filter(arrFilter),\n    }));\n  };\n\n  handleDoubleClickEditTitle = (editedTitle, todoId) => {\n    const mapFuncEditTitle = todo => (\n      todo.id === todoId\n        ? {\n          ...todo, title: editedTitle,\n        }\n        : todo\n    );\n\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map(mapFuncEditTitle),\n    }));\n  };\n\n  handleButtonChange = (value) => {\n    switch (value) {\n      case 'active':\n        this.setState(prevState => ({\n          todos: prevState.initialTodos.filter(todo => !todo.completed),\n          buttonSelected: 'active',\n        }));\n        break;\n      case 'completed':\n        this.setState(prevState => ({\n          todos: prevState.initialTodos.filter(todo => !todo.completed),\n          buttonSelected: 'completed',\n        }));\n        break;\n      case 'all':\n      default:\n        this.setState(prevState => ({\n          todos: [...prevState.initialTodos],\n          buttonSelected: 'all',\n        }));\n    }\n  };\n\n  handleDeleteAllCompleted = () => {\n    const filterFunc = arr => (\n      arr.filter(todo => !todo.completed)\n    );\n\n    this.setState(prevState => ({\n      todos: filterFunc(prevState.todos),\n      initialTodos: filterFunc(prevState.initialTodos),\n    }));\n  };\n\n  render() {\n    const {\n      todos, initialTodos, buttonSelected,\n    } = this.state;\n\n    return (\n      <div className=\"todoapp\">\n        <NewTodo addNewTodo={this.handleAddNewTodo} />\n\n        <div className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.handlecompletedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as completed</label>\n\n          <TodoList\n            todosList={todos}\n            handleTodoStatus={this.handleTodoStatus}\n            handleDeleteTodo={this.handleDeleteTodo}\n            handleDoubleClickEditTitle={this.handleDoubleClickEditTitle}\n          />\n        </div>\n        <TodosFilter\n          todosList={todos}\n          initialTodos={initialTodos}\n          buttonSelected={buttonSelected}\n          handleButtonChange={this.handleButtonChange}\n          handleDeleteAllCompleted={this.handleDeleteAllCompleted}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}